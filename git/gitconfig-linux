#
# dotfiles : https://github.com/saigkill/dotfiles
#
# Git configuration.
#
# Authors:
#   Sascha Manns <Sascha.Manns@outlook.de>
#

# Global Config
[user]
	email = "Sascha.Manns@outlook.de"
	name = "Sascha Manns"
    signingkey = 8C774E4EEA7C0DCAB7F8159D32FA7F0AC1DC7DF9

[credential]
	helper = store

[branch "master"]
    remote = origin
    merge = refs/heads/master

[color]
    branch = always
    diff = always
    grep = always
    interactive = always
    pager = true
    showbranch = auto
    status = auto
    ui = always

[color "interactive"]
    error = red bold

[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green

[color "diff"]
    meta = yellow
    frag = magenta
    old = red
    new = green
    whitespace = white reverse

[color "status"]
    added = yellow
    changed = green
    untracked = cyan
    branch = magenta

[core]
    pager = less -FRSX
    whitespace = fix,-indent-with-non-tab,trailing-space,cr-at-eol
	editor = '/usr/bin/vim' -f -i NONE # If you use another editor or another vim version, just set the correct path

[gpg]
	program = /usr/bin/gpg

[diff]
    tool = vimdiff

[difftool]
    prompt = false

[merge]
    tool = vimdiff

[commit]
	gpgsign = true

[alias]
    # branch
    b  = branch
    bc = checkout -b
    bl = branch -v
    bL = branch -av
    bx = branch -d
    bX = branch -D
    bm = branch -m
    bM = branch -M
    bs = show-branch
    bS = show-branch -a

    # clone with submodules
    cr = clone --recursive -j8
    su = submodule update --init --recursive

    # checkout/fetch/merge/push/rebase
    # checkout
    co  = checkout
    co0 = checkout HEAD --

    # fetch
    f   = fetch
    fm  = pull
    fo  = fetch origin
    fu  = fetch upstream

    # merge
    m   = merge
    mom = merge origin/master

    # push
    p   = push
    pa  = push --all
    pt  = push --tags

    # rebase
    r   = rebase
    ra  = rebase --abort
    rc  = rebase --continue
    ri  = rebase --interactive
    rs  = rebase --skip
    rom = rebase origin/master

    # commit
    c      = commit -v
    ca     = commit --all -v
    cm     = commit --message
    cam    = commit --all --message
    camend = commit --amend --reuse-message HEAD
    cundo  = reset --soft "HEAD^"
    cp     = cherry-pick
    cws    = commit --no-gpg-sign

    # diff
    d    = diff          # Diff working dir to index
    ds   = diff --staged # Diff index to HEAD
    dc   = diff --staged # Diff index to HEAD
    dh   = diff HEAD     # Diff working dir and index to HEAD
    hub  = browse
    hubd = compare

    # index
    s  = status
    a  = add
    ia = add
    ir = reset
    res = restore

    # log
    l   = log --topo-order --pretty=format:'%C(yellow)%h %C(cyan)%cn %C(blue)%cr%C(reset) %s'
    ls  = log --topo-order --stat --pretty=format:'%C(bold)%C(yellow)Commit:%C(reset) %C(yellow)%H%C(red)%d%n%C(bold)%C(yellow)Author:%C(reset) %C(cyan)%an <%ae>%n%C(bold)%C(yellow)Date:%C(reset)   %C(blue)%ai (%ar)%C(reset)%n%+B'
    ld  = log --topo-order --stat --patch --full-diff --pretty=format:'%C(bold)%C(yellow)Commit:%C(reset) %C(yellow)%H%C(red)%d%n%C(bold)%C(yellow)Author:%C(reset) %C(cyan)%an <%ae>%n%C(bold)%C(yellow)Date:%C(reset)   %C(blue)%ai (%ar)%C(reset)%n%+B'
    lg  = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
    lga = log --topo-order --all --graph --pretty=format:'%C(yellow)%h %C(cyan)%cn%C(reset) %s %C(red)%d%C(reset)%n'
    lm  = log --topo-order --pretty=format:'%s'
    lh  = shortlog --summary --numbered
    llf = fsck --lost-found

    lg1 = log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
    lg2 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all

    # remote
    re  = remote
    rel = remote --verbose
    rea = remote add
    rex = remote rm
    rem = remote rename

    # mixes (Introduced by nick)
    acnp = !git add -A && git commit --amend --no-edit --no-verify && git push --force-with-lease
    acp = !git add -A && git commit --amend --no-edit && git push --force-with-lease
    acn = !git add -A && git commit --amend --no-edit --no-verify
    ac = !git add -A && git commit --amend --no-edit
    uf = !HUSKY=0 git checkout main && git pull && HUSKY=0 git checkout - && git rebase main
    b = !git checkout main && git pull

    # merge
    mnf = merge --no-ff

    # search
    # Find commits by source code.
    cc = "!f() { \
        git log --pretty=custom --decorate --date=short -S\"$1\"; \
    }; f"

    # Find commits by commit message.
    cm = "!f() { \
        git log --pretty=custom --decorate --date=short --grep=\"$1\"; \
    }; f"

    # Credit an author on the latest commit.
    credit = "!f() { \
        if [ -n \"$1\" ] && [ -n \"$2\" ]; then \
            git commit --amend --author \"$1 <$2>\" -C HEAD; \
        fi \
    }; f"

    # List remote branches.
    lrb = "!f() { \
        remote="${1:-origin}"; \
        git ls-remote --heads "$remote"; \
    }; f"


[url "git@github.com:"]
    insteadof = github:

[pull]
	rebase = false

[push]
    autoSetupRemote = true
